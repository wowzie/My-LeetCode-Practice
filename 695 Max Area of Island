class Solution {
    public int maxAreaOfIsland(int[][] grid) {
        boolean[][] visited = new boolean[grid.length][grid[0].length];
        int maxArea = 0;
        
        for (int i = 0; i < grid.length; ++i) {
            for (int j = 0; j < grid[0].length; ++j) {
                if (grid[i][j] == 1 && !visited[i][j]) {
                    maxArea = Math.max(dfs(grid, i, j, visited), maxArea);
                }
            }
        }
        
        return maxArea;
    }
    
    public int dfs(int[][] grid, int row, int col, boolean[][] visited) {
        if (row < 0 || row >= grid.length || col < 0 || col >= grid[0].length || grid[row][col] != 1 || visited[row][col]) {
            return 0;
        }
        
        visited[row][col] = true;
        int up = dfs(grid, row-1, col, visited);
        int down = dfs(grid, row+1, col, visited);
        int left = dfs(grid, row, col-1, visited);
        int right = dfs(grid, row, col+1, visited);
        
        
        if (grid[row][col] == 1) {
            return 1 + up + down + left + right;
        }
        
        return up + down + left + right;
    }
}

---- Key Insights ---- 

Use DFS to find area. Simple DFS. 
Tricky calculating area, check notes below: 

public int dfs(int[][] grid, int row, int col, int count, boolean[][] visited) { 
    if (//conditions to return false) { 
        return 0; 
    } 
    
    visited[row][col] = true; 
    
    int up = dfs(grid, row-1, col, count, visited); 
    int down = dfs(grid, row+1, col, count, visited); 
    int left = dfs(grid, row, col-1, count, visited); 
    int right = dfs(grid, row, col+1, count, visited); 
    
    if (grid[row][col] == 1) { 
        return 1 + up + down + left + right; 
    } 
    return up + down + left + right; }
